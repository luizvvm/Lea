# gemini_service.py
import os
import json
import google.generativeai as genai

# Configura√ß√£o inicial da API (continua a mesma)
try:
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
    genai.configure(api_key=GEMINI_API_KEY)
    print("INFO: API do Gemini configurada com sucesso!")
except Exception as e:
    print(f"ERRO CR√çTICO: N√£o foi poss√≠vel configurar a API do Gemini. Verifique sua GEMINI_API_KEY. Erro: {e}")

# Defini√ß√µes do modelo de IA
generation_config = {
  "temperature": 0.7,
  "max_output_tokens": 2048,
  "response_mime_type": "application/json",
}

model = genai.GenerativeModel(model_name="gemini-1.5-flash-latest",
                              generation_config=generation_config)

def gerar_resposta_inteligente(texto_usuario):
    prompt = f"""
    Voc√™ √© a "Lea", uma assistente de planejamento pessoal via WhatsApp.
    Sua personalidade √© amig√°vel, emp√°tica e motivadora.
    Seu objetivo √© analisar a mensagem do usu√°rio e determinar a a√ß√£o a ser tomada.

    Analise a mensagem do usu√°rio abaixo e identifique a inten√ß√£o principal.
    As inten√ß√µes poss√≠veis s√£o:
    - "criar_tarefa": O usu√°rio quer adicionar uma nova tarefa. Extraia a descri√ß√£o da tarefa.
    - "listar_tarefas": O usu√°rio quer ver suas tarefas pendentes.
    - "concluir_tarefa": O usu√°rio quer marcar uma tarefa como feita. Extraia o 'task_id'.
    - "conversa_geral": Para qualquer outra intera√ß√£o que n√£o seja uma a√ß√£o espec√≠fica.

    MENSAGEM DO USU√ÅRIO: "{texto_usuario}"

    Responda SEMPRE no seguinte formato JSON, sem exce√ß√µes:
    {{
      "intent": "string (ex: criar_tarefa)",
      "parameters": {{
        "descricao_tarefa": "string (opcional, a descri√ß√£o da tarefa extra√≠da)",
        "task_id": "string (opcional, o ID da tarefa extra√≠do, ex: T1)"
      }},
      "response_to_user": "string (a mensagem em linguagem natural para enviar de volta ao usu√°rio)"
    }}

    Exemplos de como voc√™ deve pensar e responder:
    1.  MENSAGEM DO USU√ÅRIO: "bom dia lea"
        - Pensamento: Isso √© uma sauda√ß√£o. A inten√ß√£o √© 'conversa_geral'.
        - Resposta JSON: {{"intent": "conversa_geral", "parameters": {{}}, "response_to_user": "Bom dia! ‚ú® Pronto para organizar seu dia e conquistar seus objetivos?"}}

    2.  MENSAGEM DO USU√ÅRIO: "cria uma tarefa pra comprar p√£o e leite na padaria"
        - Pensamento: O usu√°rio quer adicionar algo. A inten√ß√£o √© 'criar_tarefa'. A descri√ß√£o √© 'comprar p√£o e leite na padaria'.
        - Resposta JSON: {{"intent": "criar_tarefa", "parameters": {{"descricao_tarefa": "comprar p√£o e leite na padaria"}}, "response_to_user": "Anotado! üìù Tarefa 'comprar p√£o e leite na padaria' adicionada √† sua lista."}}

    3.  MENSAGEM DO USU√ÅRIO: "o que eu tenho que fazer hoje?"
        - Pensamento: O usu√°rio quer ver sua lista. A inten√ß√£o √© 'listar_tarefas'.
        - Resposta JSON: {{"intent": "listar_tarefas", "parameters": {{}}, "response_to_user": "Deixa eu dar uma olhadinha nas suas tarefas pendentes..."}}

    4.  MENSAGEM DO USU√ÅRIO: "concluir tarefa T1"
        - Pensamento: O usu√°rio quer concluir a tarefa T1. A inten√ß√£o √© 'concluir_tarefa'. O task_id √© 'T1'.
        - Resposta JSON: {{"intent": "concluir_tarefa", "parameters": {{"task_id": "T1"}}, "response_to_user": "Perfeito! Tarefa T1 marcada como conclu√≠da. Mais um passo dado! ‚úÖ"}}
    """

    try:
        response = model.generate_content(prompt)
        parsed_json = json.loads(response.text)
        return parsed_json
    except json.JSONDecodeError:
        print(f"ERRO: A API Gemini n√£o retornou um JSON v√°lido. Resposta: {response.text}")
        return {"intent": "conversa_geral", "parameters": {}, "response_to_user": "Ops, me enrolei aqui! Pode tentar de novo, por favor?"}
    except Exception as e:
        print(f"ERRO ao chamar a API Gemini: {e}")
        return {"intent": "conversa_geral", "parameters": {}, "response_to_user": "Estou com um probleminha t√©cnico. Tente novamente em um instante, por favor."}